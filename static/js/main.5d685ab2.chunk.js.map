{"version":3,"sources":["serviceWorker.tsx","store/reducers/audioUploadReducer.ts","store/actions/actionTypes.ts","store/reducers/sidebarReducer.ts","store/reducers/streamReducer.ts","util/history.ts","config.ts","util/signalrManager.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","isNewFilesLoaded","newFilesName","audioUploadReducer","state","arguments","length","undefined","action","updatedState","Object","objectSpread","type","payload","nextValue","push","filename","updatedNewFiles","filter","file","filenames","includes","currentTabId","sidebar","nextId","connectingStatus","currentPlaybackTime","currentSpeechId","currentSpeechIndex","isPlaying","maxDuration","performanceId","speeches","reducer","id","sort","s1","s2","order","duration","findIndex","speech","currentSpeech","find","s","status","createBrowserHistory","config","urlApi","SignalrManager","classCallCheck","this","connection","backendURL","get","signalR","withUrl","concat","build","on","number","document","getElementById","innerHTML","console","log","start","stop","command","send","__webpack_require__","d","__webpack_exports__","signalRManager","combineReducers","stream","streamReducer","sidebarReducer","audioUpload","store","createStore","composeWithDevTools","applyMiddleware","thunk","set","configuration","app","react_default","a","createElement","es","Router","history","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d685ab2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface IConfig {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\n\ninterface IStateType {\n    isNewFilesLoaded: boolean;\n    newFilesName: string[];\n}\n\ninterface IActionType {\n    type: string;\n    payload: any;\n}\n\nconst initialState: IStateType = {\n    isNewFilesLoaded: false,\n    newFilesName: [],\n};\n\nconst audioUploadReducer = (state: IStateType = initialState, action: IActionType) => {\n    const updatedState = {\n        ...state,\n    };\n\n    switch (action.type) {\n        case actionTypes.CHANGE_IS_NEW_FILES_LOADED:\n            updatedState.isNewFilesLoaded = action.payload.nextValue;\n            break;\n        case actionTypes.ADD_NEW_FILES_NAME:\n            updatedState.newFilesName.push(action.payload.filename);\n            break;\n        case actionTypes.DELETE_NEW_FILES_NAME:\n            const updatedNewFiles = updatedState.newFilesName.filter((file) => !action.payload.filenames.includes(file));\n            updatedState.newFilesName = updatedNewFiles;\n            updatedState.isNewFilesLoaded = updatedNewFiles.length > 0 ? true : false;\n            break;\n        case actionTypes.CHANGE_AUDIO_UPLOAD_TO_INITIAL_STATE:\n            updatedState.isNewFilesLoaded = false;\n            updatedState.newFilesName = [];\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default audioUploadReducer;\n","// For streaming\nexport const SAVE_PERFORMANCE_ID = \"SAVE_PERFORMANCE_ID\";\nexport const LOAD_SPEECHES = \"LOAD_SPEECHES\";\nexport const SAVE_CURRENT_SPEECH_ID = \"SAVE_CURRENT_SPEECH_ID\";\nexport const CHANGE_STREAMING_STATUS = \"CHANGE_ISPLAYING_STATUS\";\nexport const CHANGE_STREAM_STATE_TO_INITIAL = \"CHANGE_STREAM_STATE_TO_INITIAL\";\nexport const CHANGE_CURRENT_PLAYBACK_TIME = \"CHANGE_CURRENT_PLAYBACK_TIME\";\nexport const CHANGE_CONNECTING_STATUS = \"CHANGE_CONNECTING_STATUS\";\n\n// For Sidebar\nexport const CHANGE_CURRENT_TAB_ID = \"CHANGE_CURRENT_TAB_ID\";\n\n// For AudioUpload\nexport const CHANGE_IS_NEW_FILES_LOADED = \"CHANGE_IS_NEW_FILES_LOADED\";\nexport const ADD_NEW_FILES_NAME = \"ADD_NEW_FILES_NAME\";\nexport const DELETE_NEW_FILES_NAME = \"DELETE_NEW_FILES_NAME\";\nexport const CHANGE_AUDIO_UPLOAD_TO_INITIAL_STATE = \"CHANGE_TO_AUDIO_UPLOAD_INITIAL_STATE\";\n","import * as actionTypes from \"../actions/actionTypes\";\n\ninterface ISidebarStateType {\n    currentTabId: number;\n}\n\ninterface IActionType {\n    type: string;\n    payload: any;\n}\n\nconst initialState: ISidebarStateType = {\n    currentTabId: 0,\n};\n\nconst sidebar = (state: ISidebarStateType = initialState, action: IActionType) => {\n    const updatedState = {\n        ...state,\n    };\n\n    switch (action.type) {\n        case actionTypes.CHANGE_CURRENT_TAB_ID:\n            updatedState.currentTabId = action.payload.nextId;\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default sidebar;\n","import * as actionTypes from \"../actions/actionTypes\";\n\ninterface IActionType {\n    type: string;\n    payload: any;\n}\n\ninterface IStateType {\n    performanceId: number;\n    speeches?: Array<{\n        id: number,\n        text: string,\n        duration: number,\n        order: number,\n    }>;\n    connectingStatus: boolean;\n    isPlaying: boolean;\n    currentSpeechId: number;\n    currentSpeechIndex: number;\n    currentPlaybackTime: number;\n    maxDuration: number;\n}\n\nconst initialState = {\n    connectingStatus: false,\n    currentPlaybackTime: 0,\n    currentSpeechId: -1,\n    currentSpeechIndex: -1,\n    isPlaying: false,\n    maxDuration: 0,\n    performanceId: -1,\n    speeches: undefined,\n};\n\nconst reducer = (state: IStateType = initialState, action: IActionType) => {\n    let updatedState = {\n        ...state,\n    };\n\n    switch (action.type) {\n        case actionTypes.SAVE_PERFORMANCE_ID:\n            updatedState.performanceId = action.payload.id;\n            break;\n        case actionTypes.LOAD_SPEECHES:\n            if (action.payload.speeches.length !== 0) {\n                updatedState.speeches = action.payload.speeches.sort((s1: any, s2: any) => s1.order > s2.order ? 1 : -1);\n                updatedState.currentSpeechId = action.payload.speeches[0].id;\n\n                updatedState.currentSpeechIndex = 0;\n                updatedState.maxDuration = action.payload.speeches[0].duration;\n            }\n            break;\n        case actionTypes.SAVE_CURRENT_SPEECH_ID:\n            updatedState.currentSpeechId = action.payload.currentSpeechId;\n            updatedState.currentSpeechIndex = state.speeches !== undefined ?\n                state.speeches.findIndex((speech) => speech.id === action.payload.currentSpeechId) : -1;\n\n            const currentSpeech = state.speeches !== undefined ?\n                state.speeches.find((s) => s.id === action.payload.currentSpeechId) : undefined;\n            updatedState.maxDuration = currentSpeech !== undefined ? currentSpeech.duration : 0;\n            break;\n        case actionTypes.CHANGE_STREAMING_STATUS:\n            updatedState.isPlaying = action.payload.isPlaying;\n            break;\n        case actionTypes.CHANGE_CURRENT_PLAYBACK_TIME:\n            updatedState.currentPlaybackTime = action.payload.currentPlaybackTime;\n            break;\n        case actionTypes.CHANGE_STREAM_STATE_TO_INITIAL:\n            updatedState = initialState;\n            break;\n        case actionTypes.CHANGE_CONNECTING_STATUS:\n            updatedState.connectingStatus = action.payload.status;\n            break;\n        default:\n            break;\n    }\n\n    return updatedState;\n};\n\nexport default reducer;\n","// history.js\nimport { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory({\n  /* pass a configuration object here if needed */\n});\n","interface IConfigType {\n    urlApi: string;\n}\n\nconst config: IConfigType = {\n    urlApi: \"http://10.26.34.64:5000/\",\n};\n\nexport default config;\n","import * as signalR from \"@aspnet/signalr\";\nimport config from \"react-global-configuration\";\n\nclass SignalrManager {\n    public connection: signalR.HubConnection;\n\n    constructor() {\n        const backendURL = config.get(\"urlApi\");\n\n        this.connection = new signalR.HubConnectionBuilder()\n            .withUrl(`${backendURL}StreamHub`)\n            .build();\n\n        this.connection.on(\"updateCount\", (number: string) => {\n            const counterBlock: any = document.getElementById(\"userCounter\");\n\n            counterBlock.innerHTML = number;\n        });\n    }\n\n    public async connectToHub(): Promise<void> {\n        console.log(\"Try to connect to SignalR Hub\");\n\n        return await this.connection.start();\n    }\n\n    public async disconnectFromHub(): Promise<void> {\n        console.log(\"Try to disconnect from SignalR Hub\");\n\n        return await this.connection.stop();\n    }\n\n    public async sendCommand(command: string): Promise<void> {\n        console.log(\"Try send to SignalR Hub:\" + command);\n\n        return await this.connection.send(\"SendMessage\", command);\n    }\n}\n\nexport default SignalrManager;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Router } from \"react-router\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport audioUploadReducer from \"./store/reducers/audioUploadReducer\";\nimport sidebarReducer from \"./store/reducers/sidebarReducer\";\nimport streamReducer from \"./store/reducers/streamReducer\";\nimport history from \"./util/history\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./assets/css/font-awesome.css\";\nimport \"./index.css\";\n\nimport config from \"react-global-configuration\";\nimport configuration from \"./config\";\nimport SignalrManager from \"./util/signalrManager\";\n\nconst reducer: any = combineReducers({\n    stream: streamReducer,\n    sidebar: sidebarReducer,\n    audioUpload: audioUploadReducer,\n});\n\nconst store: any = createStore(reducer, composeWithDevTools(applyMiddleware(\n    thunk,\n)));\n\nconfig.set(configuration);\n\nconst app: JSX.Element = (\n    <Provider store={store}>\n        <Router history={history}>\n        </Router>\n    </Provider>\n);\n\nexport const signalRManager: SignalrManager = new SignalrManager();\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}